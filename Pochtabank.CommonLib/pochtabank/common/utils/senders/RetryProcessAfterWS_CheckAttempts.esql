BROKER SCHEMA pochtabank.common.utils.senders
PATH pochtabank.common.utils;

DECLARE customModuleName EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE RetryProcessAfterWS_CheckAttempts
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	
		DECLARE attemptCount INT Environment.usr.sender.attemptCount;
		DECLARE retry INT Environment.usr.sender.retry;
				
		IF EXISTS(InputExceptionList.*[]) THEN
			DECLARE codeError INTEGER 0;
			DECLARE errorDescription CHARACTER '';
			SET Environment.usr.sender.failureMsg = InputExceptionList;
			CALL GetInCodeExceptionDetails(Environment.usr.sender.failureMsg, codeError, errorDescription);
		    DELETE FIELD InputExceptionList;
		    IF (attemptCount <= retry) THEN
		    CALL AddInCodeLogSection(Environment, OutputRoot, FALSE, customModuleName, 10, codeError, 'Вызов сервиса не удался. Попытка ' || 
		    CAST(attemptCount AS CHARACTER) || ' из ' || CAST(retry AS CHARACTER) || '. Причина: ' ||  errorDescription);
		    END IF;
    	ELSEIF EXISTS(InputRoot.SOAP.*:Body.*:Fault[]) THEN
			DECLARE fault REFERENCE TO InputRoot.SOAP.*:Body.*:Fault;
			SET Environment.usr.sender.soapFaultMsg = ASBITSTREAM(InputRoot.SOAP OPTIONS RootBitStream ENCODING GetDefaultEncoding() CCSID GetDefaultCCSID());
			IF (attemptCount <= retry) THEN
			CALL AddInCodeLogSection(Environment, OutputRoot, FALSE, customModuleName, 10, 0, 'Вызов сервиса не удался. Попытка ' || 
		    CAST(attemptCount AS CHARACTER) || ' из ' || CAST(retry AS CHARACTER) || '. Причина: ' ||  fault.*:faultcode || ' | ' || fault.*:faultstring);
			END IF;
		ELSE
			CREATE FIELD Environment.usr.sender.httpFaultMsg;
			SET Environment.usr.sender.httpFaultMsg = ASBITSTREAM(InputRoot.XMLNSC OPTIONS RootBitStream ENCODING GetDefaultEncoding() CCSID GetDefaultCCSID());
			IF (attemptCount <= retry) THEN
			CALL AddInCodeLogSection(Environment, OutputRoot, FALSE, customModuleName, 10, 0, 'Вызов сервиса не удался. Попытка ' || 
		    CAST(attemptCount AS CHARACTER) || ' из ' || CAST(retry AS CHARACTER) || '. Причина: ' || Environment.usr.sender.httpFaultMsg);
			END IF;
		END IF;
		 		
		IF (attemptCount <= retry) THEN
			IF EXISTS(Environment.usr.sender.inputMsg.XMLNSC[]) THEN
				CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') PARSE(CAST(Environment.usr.sender.inputMsg.XMLNSC AS BLOB) OPTIONS RootBitStream ENCODING GetDefaultEncoding() CCSID GetDefaultCCSID());
			ELSE
				CREATE LASTCHILD OF OutputRoot DOMAIN('SOAP') PARSE(CAST(Environment.usr.sender.inputMsg.SOAP AS BLOB) OPTIONS RootBitStream ENCODING GetDefaultEncoding() CCSID GetDefaultCCSID());
			END IF;
			SET OutputRoot.Properties.CodedCharSetId = GetDefaultCCSID();	
			SET Environment.usr.sender.attemptCount = attemptCount + 1;
			PROPAGATE TO TERMINAL 'out';
		ELSE
			IF (EXISTS(Environment.usr.sender.failureMsg[]) AND EXISTS(Environment.usr.sender.httpFaultMsg[])) THEN
				CALL SaveMsgHeadersToRetry(OutputRoot, Environment);
				CALL SaveLogToNextFlow(OutputRoot, Environment);
				CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') PARSE(CAST(Environment.usr.sender.inputMsg.XMLNSC AS BLOB) OPTIONS RootBitStream ENCODING GetDefaultEncoding() CCSID GetDefaultCCSID());
				SET OutputExceptionList = Environment.usr.sender.failureMsg; 
				PROPAGATE TO TERMINAL 'out2';
			ELSEIF (EXISTS(Environment.usr.sender.failureMsg[]) AND EXISTS(Environment.usr.sender.soapFaultMsg[])) THEN				
				CALL SaveMsgHeadersToRetry(OutputRoot, Environment);
				CALL SaveLogToNextFlow(OutputRoot, Environment);
				CREATE LASTCHILD OF OutputRoot DOMAIN('SOAP') PARSE(CAST(Environment.usr.sender.inputMsg.SOAP AS BLOB) OPTIONS RootBitStream ENCODING GetDefaultEncoding() CCSID GetDefaultCCSID());
				SET OutputExceptionList = Environment.usr.sender.failureMsg;  
				PROPAGATE TO TERMINAL 'out2';
			ELSEIF EXISTS(Environment.usr.sender.soapFaultMsg[]) THEN
				CALL SaveMsgHeadersToRetry(OutputRoot, Environment);
				CALL SaveLogToNextFlow(OutputRoot, Environment);
				CREATE LASTCHILD OF OutputRoot DOMAIN('SOAP') PARSE(CAST(Environment.usr.sender.soapFaultMsg AS BLOB) OPTIONS RootBitStream ENCODING GetDefaultEncoding() CCSID GetDefaultCCSID());
			PROPAGATE TO TERMINAL 'out1';
			ELSEIF EXISTS(Environment.usr.sender.HTTPfaultMsg[]) THEN
				CALL SaveMsgHeadersToRetry(OutputRoot, Environment);
				CALL SaveLogToNextFlow(OutputRoot, Environment);
				CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') PARSE(CAST(Environment.usr.sender.httpFaultMsg AS BLOB) OPTIONS RootBitStream ENCODING GetDefaultEncoding() CCSID GetDefaultCCSID());
				PROPAGATE TO TERMINAL 'out1';
			ELSE
				SET OutputExceptionList = Environment.usr.sender.failureMsg; 
				PROPAGATE TO TERMINAL 'out2';
			END IF;
		END IF;
		RETURN FALSE;
	END;
END MODULE;