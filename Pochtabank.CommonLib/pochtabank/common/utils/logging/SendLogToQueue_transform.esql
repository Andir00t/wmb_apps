BROKER SCHEMA pochtabank.common.utils.logging
PATH pochtabank.common.utils;



CREATE COMPUTE MODULE SendLogToQueue_Transform
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- конструируем выходное сообщение для очереди службы логирования в БД
		CREATE LASTCHILD OF OutputRoot DOMAIN ('MQMD');
		CREATE LASTCHILD OF OutputRoot DOMAIN ('MQRFH2');
		IF EXISTS(InputRoot.MQRFH2[]) THEN
			SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		END IF; 
		-- копируем при помощи процедуры общую информацию о логах
		CREATE FIELD OutputRoot.MQRFH2.usr.logInfo;
		CALL CopyBranch(Environment.usr.logsCommonInfo, OutputRoot.MQRFH2.usr.logInfo);
		-- копируем сами логи
		CREATE FIELD OutputRoot.MQRFH2.usr.logs;
		CALL CopyBranch(Environment.usr.logs, OutputRoot.MQRFH2.usr.logs);
		-- переводим все поля ошибок из деревьев в переменные BLOB для логгера
		DECLARE num INTEGER CARDINALITY(OutputRoot.MQRFH2.usr.logs.log[]);
		DECLARE i INTEGER 1;
		WHILE i <= num DO
			IF EXISTS(OutputRoot.MQRFH2.usr.logs.log[i].excList[]) THEN
				DECLARE codeError INTEGER 0;
				DECLARE errorDescription CHAR '';
				DECLARE refExcList REFERENCE TO OutputRoot.MQRFH2.usr.logs.log[i].excList;
				CALL getExceptionInfo(refExcList, codeError, errorDescription);
				SET OutputRoot.MQRFH2.usr.logs.log[i].code = codeError;
				SET OutputRoot.MQRFH2.usr.logs.log[i].description = OutputRoot.MQRFH2.usr.logs.log[i].description || ' | ' || errorDescription;		
				DECLARE excListBLOB BLOB ASBITSTREAM(OutputRoot.MQRFH2.usr.logs.log[i].excList);
				DELETE FIELD OutputRoot.MQRFH2.usr.logs.log[i].excList;
				CREATE FIELD OutputRoot.MQRFH2.usr.logs.log[i].excList;
				SET OutputRoot.MQRFH2.usr.logs.log[i].excList = excListBLOB;
			END IF;
			SET i = i + 1;
		END WHILE;
		RETURN TRUE;
	END;
	
	
END MODULE;
