BROKER SCHEMA pochtabank.srvefrsb.v2.srv.esql
PATH pochtabank.srvefrsb.v2.srv.utils.esql, pochtabank.common.utils;

CREATE COMPUTE MODULE pochtabank_srvefrsb_srv_prepare_second_req
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
			
		SET Environment.usr.currentMsg = InputRoot.XMLNSC;
		DECLARE bankruptId CHARACTER;
		SET bankruptId = FIELDVALUE(InputRoot.XMLNSC.GetDebtorRegisterResponse.GetDebtorRegisterResult.DebtorList.*.BankruptId);
		IF NOT isNullOrEmpty(bankruptId) THEN
		CALL CreateGetDebtorMessagesContentReq(OutputRoot, bankruptId, CAST(InputRoot.MQRFH2.usr.DateLastUpdate AS CHARACTER FORMAT 'yyyy-MM-dd'));
		PROPAGATE TO TERMINAL 'out' DELETE NONE;
		END IF;
		
		IF (InputRoot.MQRFH2.usr.lastBankrupt = TRUE) THEN
		CALL RestoreLogToFlow(InputRoot, Environment);
		SET OutputRoot.XMLNSC = NULL;
			IF BankruptCount <> 0 THEN
				UPDATE Database.dbo.ESB_PARAMS AS D
				SET PARAM_VALUE = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss')
				WHERE (D.SRVNAME = 'SRVEFRSB') AND (D.PARAM_NAME = 'lastReportDate');
				CALL AddInCodeLogSection(Environment, OutputRoot, FALSE, 'SRVEFRSB', 0, 'За: ' || InputRoot.MQRFH2.usr.DateLastUpdate || ' выгружено банкротов: ' || CAST(BankruptCount AS CHARACTER));
				PROPAGATE TO TERMINAL 'out1';
			ELSE
				CALL AddInCodeLogSection(Environment, OutputRoot, FALSE, 'SRVEFRSB', 10, 'Во время работы возникли ошибки');
				PROPAGATE TO TERMINAL 'out1';
			END IF;	
		SET BankruptCount = 0;
		END IF;
							
		RETURN FALSE;
	END;
		
END MODULE;